# -*- coding: utf-8 -*-
"""Penerapan-Convolutional-Neural-Network-untuk-Deteksi-Beras-Palsu.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aMk6iDUeEUsQcJ9mFiFllRVaq0QT3egE
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install keras_preprocessing
!pip install split-folders

import os
import splitfolders
import tensorflow as tf
import matplotlib.pyplot as plt
import keras
import keras_preprocessing
from PIL import Image
from keras_preprocessing.image import ImageDataGenerator
#from sklearn.model_selection import train_test_split
#from tensorflow.keras.layers import Input
#from tensorflow.keras.applications import Xception, InceptionV3, ResNet152V2

dataset_dir = '/content/drive/MyDrive/SKRIPSI_2/New_Dataset/Hasil augmentasi'
classes = os.listdir(dataset_dir)
plt.figure(figsize=(15,10))

for i, class_name in enumerate(classes):
    class_dir = os.path.join(dataset_dir, class_name)
    img_paths = [os.path.join(class_dir, img) for img in os.listdir(class_dir)[:3]]  # Mengambil 3 gambar pertama dari setiap kelas

    for j, img_path in enumerate(img_paths):
        img = Image.open(img_path)
        plt.subplot(len(classes), 3, i * 3 + j + 1)
        plt.imshow(img)
        plt.title(class_name)
        plt.axis("off")

plt.show()

save_dir = '/content/drive/MyDrive/SKRIPSI_2/New_Dataset/Splitdata/'
splitfolders.ratio(dataset_dir, output=save_dir, seed=1337, ratio=(.7, .2, .1))

train_dir = os.path.join(save_dir, 'train')
val_dir = os.path.join(save_dir, 'val')
test_dir = os.path.join(save_dir, 'test')

train_data = ImageDataGenerator(rescale = 1./255)
# validation_data = ImageDataGenerator(
#     rescale = 1./255
# )
# test_data = ImageDataGenerator(
#     rescale = 1./255
# )

train_generator = train_data.flow_from_directory(
                  train_dir,
                  target_size=(128, 128),
                  batch_size=32,
                  class_mode='categorical',
                  color_mode='rgb')
validation_generator = train_data.flow_from_directory(
         val_dir,
         target_size=(128, 128),
         batch_size=32,
         color_mode= 'rgb',
         class_mode='categorical')
test_generator = train_data.flow_from_directory(
         test_dir,
         target_size=(128,128),
         batch_size=32,
         color_mode = 'rgb',
         class_mode='categorical')

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch,logs= {}):
    if(logs.get('accuracy') >= 0.98):
      print ("accuracy sudah mencapai 98%")
      self.model.stop_training = True

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation = 'relu', input_shape = (128,128,3)),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(64, (3,3), activation = 'relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(64, (3,3), activation = 'relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation = 'relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(256, activation ='relu'),
    tf.keras.layers.Dropout(0.5, seed=112),
    tf.keras.layers.Dense(3, activation = 'softmax')

])

model.summary()

optimizer = tf.keras.optimizers.RMSprop(learning_rate=0.0001)
model.compile (loss = 'categorical_crossentropy',
               optimizer = optimizer,
               metrics = ['accuracy'])

history = model.fit (
    train_generator,
    epochs=50,
    validation_data= validation_generator,
    batch_size = 32,
    callbacks = [myCallback()]
)

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

import matplotlib.image as mimg
import matplotlib.pyplot as plt

acc = (history.history['accuracy'])
val_acc = (history.history['val_accuracy'])
loss = (history.history['loss'])
val_loss = (history.history['val_loss'])

plt.figure(figsize = (16,8))
plt.subplot(1,2,1)

plt.plot(acc, label = 'Akurasi Training')
plt.plot(val_acc, label = 'Akurasi validasi')
plt.title = ('Training and Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('accuracy')
plt.legend(loc = 'upper left')

plt.subplot(1,2,2)
plt.plot(loss, label = 'Loss Training')
plt.plot(val_loss, label = 'Loss validasi')
plt.title = ('Training and Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('loss')
plt.legend(loc = 'upper left')

plt.show()

loss, accuracy = model.evaluate(test_generator, batch_size = 32)
print(f'Loss: {loss}')
print(f'Accuracy: {accuracy}')

model.save('model_uji_coba.h5')